"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
// tslint:disable-next-line:no-var-requires
const yeomanGenerator = require('yeoman-generator');
const adapter_1 = require("./adapter");
const path = require("path");
// tslint:disable-next-line:no-var-requires
const yeoman = require('yeoman-environment');
const messages = core_1.Messages.loadMessages('salesforcedx-templates', 'messages');
class TemplateCommand extends command_1.SfdxCommand {
    static buildJson(adapter, targetDir) {
        const cleanOutput = adapter.log.getCleanOutput();
        const rawOutput = `target dir = ${targetDir}\n${adapter.log.getOutput()}`;
        const output = {
            outputDir: targetDir,
            created: cleanOutput,
            rawOutput
        };
        return output;
    }
    static getDefaultApiVersion() {
        const versionTrimmed = require('../../package.json').version.trim();
        return `${versionTrimmed.split('.')[0]}.0`;
    }
    runGenerator(generator) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // tslint:disable-next-line:no-unused-expression
            if (!this.flags.apiversion) {
                this.flags.apiversion = TemplateCommand.getDefaultApiVersion();
            }
            const adapter = new adapter_1.ForceGeneratorAdapter();
            const env = yeoman.createEnv(undefined, undefined, adapter);
            env.registerStub(generator, 'generator');
            const result = yield env.run('generator', this.flags);
            const targetDir = path.resolve(this.flags.outputdir);
            // tslint:disable-next-line:no-unused-expression
            if (this.flags.json) {
                return TemplateCommand.buildJson(adapter, targetDir);
            }
            else {
                this.log(messages.getMessage('targetDirOutput', [targetDir]));
                this.log(adapter.log.getOutput());
                return result;
            }
        });
    }
}
exports.TemplateCommand = TemplateCommand;
//# sourceMappingURL=templateCommand.js.map