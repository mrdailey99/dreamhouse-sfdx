"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const path = require("path");
class AnalyticsCommand {
    constructor(config) {
        this.config = config;
    }
    get analyticsPath() {
        return path.join(this.config.cacheDir, 'analytics.json');
    }
    async record(plugin, commandId, runtime, status) {
        if (!plugin) {
            return;
        }
        const analyticsJSON = await this.readJSON();
        analyticsJSON.commands.push({
            command: commandId,
            language: 'node',
            os: this.config.platform,
            plugin: ts_types_1.ensureString(plugin.name),
            plugin_version: ts_types_1.ensureString(plugin.version),
            shell: this.config.shell,
            valid: true,
            version: this.config.version,
            runtime,
            status
        });
        await this.writeJSON(analyticsJSON);
    }
    async clear() {
        await this.writeJSON(this.initialAnalyticsJSON());
    }
    async readJSON() {
        try {
            const analytics = await core_1.fs.readJsonMap(this.analyticsPath);
            analytics.commands = analytics.commands || [];
            if (!ts_types_1.has(analytics, ['commands', 'schema'])) {
                throw Error(`Invalid analytics file contents: ${this.analyticsPath}`);
            }
            return analytics;
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                throw err;
            }
            return this.initialAnalyticsJSON();
        }
    }
    initialAnalyticsJSON() {
        return {
            commands: [],
            schema: 1
        };
    }
    async writeJSON(analyticsJSON) {
        await core_1.fs.writeJson(this.analyticsPath, ts_types_1.ensureAnyJson(analyticsJSON));
    }
}
exports.default = AnalyticsCommand;
//# sourceMappingURL=analytics.js.map