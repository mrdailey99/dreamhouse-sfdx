import { AsyncCreatable, Env } from '@salesforce/kit';
import * as appInsights from 'applicationinsights';
import { ChildProcess } from 'child_process';
declare type Properties = {
    [key: string]: string;
};
declare type Measurements = {
    [key: string]: number;
};
declare type Attributes = {
    [key: string]: string | number | undefined;
};
export interface TelemetryOptions {
    project: string;
    key: string;
    commonProperties?: Properties;
    contextTags?: Properties;
    env?: Env;
}
export declare class TelemetryReporter extends AsyncCreatable<TelemetryOptions> {
    private static ASIMOV_ENDPOINT;
    appInsightsClient: appInsights.TelemetryClient | undefined;
    private options;
    private logger;
    private env;
    constructor(options: TelemetryOptions);
    init(): Promise<void>;
    /**
     * Publishes event to app insights dashboard
     * @param eventName {string} - name of the event you want published. Will be concatenated with this.options.project
     * @param attributes {Attributes} - map of properties to publish alongside the event.
     */
    sendTelemetryEvent(eventName: string, attributes?: Attributes): void;
    /**
     * Initiates the app insights client
     */
    private createAppInsightsClient;
    /**
     * Builds the properties to send with every event
     * @return {Properties} map of base properites and properties provided when class was created
     */
    private buildCommonProperties;
    /**
     * Builds the context tags for appInsightsClient
     * @return {Properties} map of tags to add to this.appInsightsClient.context.tags
     */
    private buildContextTags;
}
export declare class SpawnedTelemetryReporter extends AsyncCreatable<TelemetryOptions> {
    static SFDX_INSIGHTS_TIMEOUT: string;
    forkedProcess: ChildProcess;
    private modulePath;
    private options;
    private logger;
    private env;
    constructor(options: TelemetryOptions);
    init(): Promise<void>;
    /**
     * Initializes the module at this.modulePath in a child process.
     */
    start(): void;
    /**
     * Immediately kills the child process.
     */
    stop(): void;
    /**
     * Sends message to child process.
     * @param eventName {string} - name of the event you want published.
     * @param attributes {Attributes} - map of properties to publish alongside the event.
     */
    sendTelemetryEvent(eventName: string, attributes?: Attributes): void;
    /**
     * Starts the child process, waits, and then stops the child process.
     */
    private beginLifecycle;
}
export declare function buildPropertiesAndMeasurements(attributes: Attributes): {
    properties: Properties;
    measurements: Measurements;
};
export declare function getPlatformVersion(): string;
export declare function getCpus(): string;
export {};
