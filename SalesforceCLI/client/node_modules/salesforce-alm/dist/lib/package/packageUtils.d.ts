declare const _default: {
    BY_PREFIX: any;
    BY_LABEL: any;
    validateId(idObj: any, value: any): void;
    validateIdNoThrow(idObj: any, value: any): any;
    validateVersionNumber(versionNumberString: any, supportedBuildNumberToken: any): any;
    validatePatchVersion(force: any, org: any, versionNumberString: any, packageId: any): Promise<void>;
    validUrl(url: any): boolean;
    isErrorFromSPVQueryRestriction(err: any): any;
    isErrorPackageNotAvailable(err: any): boolean;
    massageErrorMessage(err: any): any;
    applyErrorAction(err: any): any;
    /**
     * Given a subscriber package version ID (04t) or package version ID (05i), return the package version ID (05i)
     * @param versionId The suscriber package version ID
     * @param force For tooling query
     * @param org For tooling query
     */
    getPackageVersionId(versionId: any, force: any, org: any): any;
    /**
     * Given a package version ID (05i) or subscriber package version ID (04t), return the subscriber package version ID (04t)
     * @param versionId The suscriber package version ID
     * @param force For tooling query
     * @param org For tooling query
     */
    getSubscriberPackageVersionId(versionId: any, force: any, org: any): any;
    /**
     * Given a package descriptor, return the ancestor ID.
     * @param packageDescriptorJson JSON for packageDirectories element in sfdx-project.json
     * @param force For tooling query
     * @param org For tooling query
     */
    getAncestorId(packageDescriptorJson: any, force: any, org: any): Promise<any>;
    getConfigPackageDirectories(context: any): any;
    getConfigPackageDirectory(packageDirs: any, lookupProperty: any, lookupValue: any): any;
    /**
     * Given a packageAlias, attempt to return the associated id from the config
     * @param packageAlias string representing a package alias
     * @param force for obtaining the project config
     * @returns the associated id or the arg given.
     */
    getPackageIdFromAlias(packageAlias: any, force: any): any;
    /**
     * @param stringIn pascal or camel case string
     * @returns space delimited and lower-cased (except for 1st char) string (e.g. in "AbcdEfghIj" => "Abcd efgh ij")
     */
    convertCamelCaseStringToSentence(stringIn: any): any;
    /**
     * Given a package id, attempt to return the associated aliases from the config
     * @param packageid string representing a package id
     * @param force for obtaining the project config
     * @returns an array of alias for the given id.
     */
    getPackageAliasesFromId(packageId: any, force: any): string[];
    /**
     * Writes objects specified in the config to the sfdx-project.json file on disk.
     * @param context
     * @private
     */
    _writeProjectConfigToDisk(context: any, config: any, logger: any): any;
    LATEST_BUILD_NUMBER_TOKEN: string;
    NEXT_BUILD_NUMBER_TOKEN: string;
    VERSION_NUMBER_SEP: string;
    INSTALL_URL_BASE: string;
    DEFAULT_PACKAGE_DIR: {
        path: string;
        package: string;
        versionName: string;
        versionNumber: string;
        default: boolean;
    };
};
export = _default;
