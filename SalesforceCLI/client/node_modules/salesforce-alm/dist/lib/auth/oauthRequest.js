"use strict";
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
// Local
const almError = require("../core/almError");
const messages = require("../messages");
function _close(request) {
    request.connection.end();
    request.connection.destroy();
}
function _handleDemoMode(handleDemoModePrompt, authObject, force, oauthConfig, orgType, orgApi, trialExpirationDate, callback, demoModeError) {
    return handleDemoModePrompt(authObject.username).then(answer => {
        // if the user approves the auth, save the auth data to the machine and return the callback
        if (answer.toUpperCase() === 'YES' || answer.toUpperCase() === 'Y') {
            return force
                .saveOrgAuthData(force.logger, authObject, oauthConfig, false, orgType, orgApi, trialExpirationDate)
                .then(() => callback());
        }
        // otherwise update the error message telling the user to close the browser and return
        demoModeError.message = messages(force.config.getLocale()).getMessage('demoModeCloseBrowser', [], 'demoMode');
        return callback(demoModeError);
    });
}
function _getUrlAndRedirect(force, orgApi, response, callback, demoModeError, oauthConfig, handleDemoModePrompt, orgType) {
    // Get the front door url for the scratch org
    return (force
        .getOrgFrontDoor(orgApi, false)
        // Reference the url for a follow redirect.
        .then(responseUrl => {
        response.redirect(303, responseUrl);
        response.end();
        if (demoModeError) {
            return _handleDemoMode(handleDemoModePrompt, demoModeError.authObject, force, oauthConfig, orgType, orgApi, demoModeError.trialExpirationDate, callback, demoModeError);
        }
        else {
            return callback();
        }
    }));
}
/**
 * Express request handler for the OauthRedirect. The OAuth redirect url configured in the Connected App must be
 * http://localhost:<port>/OauthRedirect
 * @param orgApi - The scratch org api.
 * @param oauthConfig - Object containing the necessary OAuth configuration parameters.
 * @param request - The http request.
 * @param response - The http response.
 * @param validateState - Callback for testing request forgeries.
 * @param callback - The callback invoked on err or success.
 */
const OauthRequestGet = function (orgApi, oauthConfig, request, response, validateState, callback, orgType, handleDemoModePrompt) {
    const force = orgApi.force;
    const code = request.query.code;
    if (!validateState(request.query.state)) {
        const error = almError('urlStateMismatch');
        response.sendError(400, `${error.message}\n`);
        _close(request);
        return callback(error);
    }
    else {
        oauthConfig.authCode = code;
        return force
            .authorizeAndSave(oauthConfig, orgApi, orgType)
            .then(() => _getUrlAndRedirect(force, orgApi, response, callback))
            .catch(callbackOrError => {
            if (callbackOrError.name === 'AuthNotSaved') {
                return _getUrlAndRedirect(force, orgApi, response, callback, callbackOrError, oauthConfig, handleDemoModePrompt, orgType);
            }
            return callback(callbackOrError);
        })
            .finally(() => {
            _close(request);
        });
    }
};
module.exports = OauthRequestGet;

//# sourceMappingURL=oauthRequest.js.map
