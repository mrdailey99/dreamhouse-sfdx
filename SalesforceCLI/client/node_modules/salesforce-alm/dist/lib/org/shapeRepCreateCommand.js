"use strict";
/*
 * Copyright (c) 2017, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const varargsCommand_1 = require("../core/varargsCommand");
const ShapeRepApi = require("./shapeRepApi");
const Messages = require("../messages");
const messages = Messages();
class ShapeRepCreateCommand extends varargsCommand_1.default {
    constructor() {
        super('orgshape:create');
    }
    /**
     * secondary validation from the cli interface. this is a protocol style function intended to be represented by other
     * commands
     * @param context - this cli context
     * @returns {Promise}
     */
    async validate(context) {
        // validate varargs
        await super.validate(context);
        // Make sure the Org has the ShapePilotPref enabled
        this.shapeApi = new ShapeRepApi(context.org.force, context.org);
        const enabled = await this.shapeApi.isFeatureEnabled();
        if (!enabled) {
            return Promise.reject(new Error(messages.getMessage('create_shape_command_no_access', null, 'org_shape')));
        }
    }
    async execute(context, stdinValues) {
        // Finally, create the org shape and record the response
        const response = await this.shapeApi.create();
        return response;
    }
    getHumanSuccessMessage(shape) {
        return messages.getMessage('create_shape_command_success', shape.id, 'org_shape');
    }
}
module.exports = ShapeRepCreateCommand;

//# sourceMappingURL=shapeRepCreateCommand.js.map
