"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const artifactGenerator_1 = require("./artifactGenerator");
const createBase_1 = require("../../common/main/createBase");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const commandUtil_1 = require("../../common/main/commandUtil");
const artifactGeneratorInfo_1 = require("./artifactGeneratorInfo");
const projectGeneratorInfo_1 = require("../../project/main/projectGeneratorInfo");
const Messages = require("../../common/main/Messages");
const eslintGenerator_1 = require("../../eslint/main/eslintGenerator");
class ArtifactModule {
    static getFlagMap() {
        let flagMap = new Map();
        flagMap.set(ArtifactModule.ARTIFACT_VERSION_FLAG, artifactGeneratorInfo_1.ArtifactGeneratorInfo.ARTIFACT_VERSION_OPTION);
        flagMap.set(ArtifactModule.ARTIFACT_DESCRIPTION_FLAG, artifactGeneratorInfo_1.ArtifactGeneratorInfo.ARTIFACT_DESCRIPTION_OPTION);
        flagMap.set(ArtifactModule.ARTIFACT_MAKE_DEFAULT_FLAG, artifactGeneratorInfo_1.ArtifactGeneratorInfo.ARTIFACT_DEFAULT_OPTION);
        return flagMap;
    }
    suppressWorkspaceConflictMessage(rawOutput) {
        const cf = projectGeneratorInfo_1.ProjectGeneratorInfo.PROJECT_CONFIG_NAME;
        return rawOutput.replace(' conflict ' + cf + '\n' + '    force ' + cf + '\n', '');
    }
    /**
     * @param {artifactName} - name of the new Artifact
     * @param {targetPath} - where to generate the Artifact
     * @param (options) - available options (to be documented)
     *     should allow config - which is a json file with all the options in a decision tree form)
     */
    // NOTE: the yeoman generator changes the actual cwd when the destinationRoot is set
    //       and too many things in there assume that
    //       so if there is a target path, reset the cwd after done running the generator
    create(artifactName, targetPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let addGenerators = function (env) {
                env.registerStub(artifactGenerator_1.ArtifactGenerator, artifactGenerator_1.ArtifactGenerator.GENERATOR_NAME);
                // There is a bug where you cannot register a third-level generator.
                // The ESLintGenerator is registered in the projectModule. This is only
                // a problem if we every want to expose the force:artifact commands
                // as top-level public commands, but in that case the registerStub below
                // will function correctly as the command will be top level.
                env.registerStub(eslintGenerator_1.ESLintGenerator, eslintGenerator_1.ESLintGenerator.GENERATOR_NAME);
            };
            let checkInputs = function () {
                let templateName = options[generatorUtil_1.GeneratorUtil.TEMPLATE_OPTION];
                if (templateName) {
                    if (!ArtifactModule.genInfo.isValidTemplate(templateName)) {
                        return Messages.get('InvalidTemplate');
                    }
                }
                return '';
            };
            let createOptions = options;
            createOptions[artifactGeneratorInfo_1.ArtifactGeneratorInfo.ARTIFACT_NAME_OPTION] = artifactName;
            // when the artifact/project is created, the workspace config file is updated
            // the yeoman generator views this as a conflicting change in that file - which is incorrect, intentionally adding to it only
            // so that message is stripped from the output
            let rawOutput = yield new createBase_1.CreateBase().create(artifactName, targetPath, createOptions, artifactGenerator_1.ArtifactGenerator.GENERATOR_NAME, checkInputs, addGenerators);
            let outputWithoutExtraneousMessage = this.suppressWorkspaceConflictMessage(rawOutput);
            if (options[generatorUtil_1.GeneratorUtil.JSON_OPTION]) {
                return generatorUtil_1.GeneratorUtil.jsonOutput(outputWithoutExtraneousMessage);
            }
            else {
                return outputWithoutExtraneousMessage;
            }
        });
    }
    static getNameFlagName() {
        return 'artifact' + commandUtil_1.CommandUtil.NAME_FLAG;
    }
    static getPathFlagName() {
        return commandUtil_1.CommandUtil.PATH_FLAG;
    }
    static getMakeDefaultFlagName() {
        return ArtifactModule.ARTIFACT_MAKE_DEFAULT_FLAG;
    }
    static reflectCreate() {
        let reflect = { flags: {} };
        generatorUtil_1.GeneratorUtil.addNameFlag(reflect, ArtifactModule.getNameFlagName(), Messages.get('ArtifactNameFlagDescription'), Messages.get('ArtifactNameFlagLongDescription'));
        generatorUtil_1.GeneratorUtil.addCommonFlags2(reflect, ArtifactModule.genInfo.getTemplates(), ArtifactModule.genInfo.getDefaultTemplate());
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: ArtifactModule.ARTIFACT_VERSION_FLAG,
            char: 'v',
            hasValue: true,
            required: false,
            description: Messages.get('ArtifactVersionFlagDescription'),
            longDescription: Messages.get('ArtifactVersionFlagLongDescription')
        }, [], '');
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: ArtifactModule.ARTIFACT_DESCRIPTION_FLAG,
            char: 'e',
            hasValue: true,
            required: false,
            description: Messages.get('ArtifactDescriptionFlagDescription'),
            longDescription: Messages.get('ArtifactDescriptionFlagLongDescription')
        }, [], '');
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: ArtifactModule.ARTIFACT_MAKE_DEFAULT_FLAG,
            char: '',
            hasValue: false,
            required: false,
            description: Messages.get('ArtifactMakeDefaultFlagDescription'),
            longDescription: Messages.get('ArtifactMakeDefaultFlagLongDescription')
            // type: 'flag',
        }, [], '');
        return reflect;
    }
}
ArtifactModule.ARTIFACT_VERSION_FLAG = 'version';
ArtifactModule.ARTIFACT_DESCRIPTION_FLAG = 'description';
ArtifactModule.ARTIFACT_MAKE_DEFAULT_FLAG = 'makedefault';
ArtifactModule.genInfo = new artifactGeneratorInfo_1.ArtifactGeneratorInfo();
exports.ArtifactModule = ArtifactModule;

//# sourceMappingURL=artifactModule.js.map
