"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generator = require("yeoman-generator");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const lightningTypesInfo_1 = require("../../lightning/main/lightningTypesInfo");
const lightningTypes_1 = require("../../lightning/main/lightningTypes");
const Messages = require("../../common/main/Messages");
class LightningGenerator extends generator.Base {
    constructor(args, options) {
        super(args, options);
        this.lOptions = options;
        generatorUtil_1.GeneratorUtil.setPaths(__dirname, this, options);
        this.genInfo = lightningTypesInfo_1.LightningTypesInfo.getInfo(options['bundleType']);
        this.argument('bundleType', {
            desc: Messages.get('BundleTypeArgument'),
            type: 'String',
            required: false
        });
        this.argument('bundleName', {
            desc: Messages.get('BundleNameArgument'),
            type: 'String',
            required: false
        });
        this.option('apiVersion', {
            desc: Messages.get('ApiVersionOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultApiVersion()
        });
        this.option('template', {
            desc: Messages.get('TemplateOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultTemplate()
        });
    }
    prompting() {
        let that = this;
        function x(answers) {
            that.bundleType = answers['bundleType'];
            that.bundleName = answers['bundleName'];
        }
        // bundleType input checked by the caller of the generator
        return this.prompt([
            {
                type: 'list',
                name: 'bundleType',
                message: Messages.get('LightningBundTypePrompt'),
                choices: [
                    {
                        name: Messages.get('LightningAppChoice'),
                        value: lightningTypes_1.LightningBundles[lightningTypes_1.LightningBundles.lightningapp]
                    },
                    {
                        name: Messages.get('LightningCmpChoice'),
                        value: lightningTypes_1.LightningBundles[lightningTypes_1.LightningBundles.lightningcmp]
                    },
                    {
                        name: Messages.get('LightningLwcChoice'),
                        value: lightningTypes_1.LightningBundles[lightningTypes_1.LightningBundles.lightningwebcomponent]
                    },
                    {
                        name: Messages.get('LightningInfChoice'),
                        value: lightningTypes_1.LightningBundles[lightningTypes_1.LightningBundles.lightningintf]
                    },
                    {
                        name: Messages.get('LightningEvtChoice'),
                        value: lightningTypes_1.LightningBundles[lightningTypes_1.LightningBundles.lightningevt]
                    }
                ]
            }, {
                type: 'input',
                name: 'bundleName',
                message: Messages.get('LightningBundNamePrompt')
            }
        ]).then(answer => x(answer));
    }
    writing() {
        // remove targetPath since the first setPaths changes the cwd already
        let xOptions = this.lOptions;
        xOptions['targetPath'] = '.';
        this.composeWith('force:' + this.bundleType, { arguments: this.bundleName, options: xOptions });
    }
}
exports.LightningGenerator = LightningGenerator;
;

//# sourceMappingURL=lightningGenerator.js.map
