"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generator = require("yeoman-generator");
const path = require("path");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const lightningTypesInfo_1 = require("../../lightning/main/lightningTypesInfo");
const lightningTypes_1 = require("../../lightning/main/lightningTypes");
const lightningTypes_2 = require("../../lightning/main/lightningTypes");
const Messages = require("../../common/main/Messages");
const lightningModule_1 = require("./lightningModule");
class LightningTypeBaseGenerator extends generator.Base {
    constructor(args, options, lightningTypeName, lightningType, generatorDir, createSecondary) {
        super(args, options);
        this.createSecondary = false;
        generatorUtil_1.GeneratorUtil.setPaths(generatorDir, this, options);
        this.lOptions = options;
        this.lightningType = lightningType;
        this.lightningTypeName = lightningTypeName;
        this.lightningTypeExt = lightningTypes_1.LightningTypesUtil.getSuffix(this.lightningType);
        this.createSecondary = createSecondary;
        this.genInfo = lightningTypesInfo_1.LightningTypesInfo.getInfo(lightningTypes_2.LightningBundles[this.lightningType]);
        this.argument('bundleName', {
            desc: 'The name of the Lightning ' + this.lightningTypeName,
            required: false,
            type: 'String',
            defaults: ''
        });
        this.option('apiVersion', {
            desc: Messages.get('ApiVersionOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultApiVersion()
        });
        this.option('template', {
            desc: Messages.get('TemplateOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultTemplate()
        });
    }
    prompting() {
        let that = this;
        function x(answer) {
            that.bundleName = answer['bundleName'];
        }
        if (!this.bundleName) {
            return this.prompt({
                type: 'input',
                name: 'bundleName',
                message: 'What is the name of your Lightning ' + this.lightningTypeName + '?'
            }).then(answer => x(answer));
        }
    }
    writing() {
        let bundleRoot = this.bundleName;
        let componentRoot = path.join(bundleRoot, this.bundleName);
        this.fs.copyTpl(this.templatePath(this.options['template'] + '.' + this.lightningTypeExt), this.destinationPath(componentRoot + '.' + this.lightningTypeExt), {});
        const isInternal = this.lOptions[lightningModule_1.LightningModule.LIGHTNING_INTERNAL_FLAG];
        if (typeof isInternal === undefined || !isInternal) {
            this.fs.copyTpl(this.templatePath('_auradefinitionbundle.' + this.lightningTypeExt + '-meta.xml'), this.destinationPath(componentRoot + '.' + this.lightningTypeExt + '-meta.xml'), {
                apiName: this.bundleName,
                apiVersion: this.options['apiVersion'],
                description: 'A Lightning ' + this.lightningTypeName + ' Bundle'
            });
        }
        this.lOptions['bundleRoot'] = bundleRoot;
        if (this.createSecondary) {
            this.composeWith('force:' + 'lightningcontroller', {
                arguments: this.bundleName,
                options: this.lOptions
            });
            this.composeWith('force:' + 'lightninghelper', {
                arguments: this.bundleName,
                options: this.lOptions
            });
            this.composeWith('force:' + 'lightningcss', {
                arguments: this.bundleName,
                options: this.lOptions
            });
            this.composeWith('force:' + 'lightningrenderer', {
                arguments: this.bundleName,
                options: this.lOptions
            });
            this.composeWith('force:' + 'lightningsvg', {
                arguments: this.bundleName,
                options: this.lOptions
            });
            this.composeWith('force:' + 'lightningdocumentation', {
                arguments: this.bundleName,
                options: this.lOptions
            });
            // Design file is only applicable to a component
            if (this.lightningTypeName === 'Component') {
                this.composeWith('force:' + 'lightningdesign', {
                    arguments: this.bundleName,
                    options: this.lOptions
                });
            }
        }
    }
}
exports.LightningTypeBaseGenerator = LightningTypeBaseGenerator;

//# sourceMappingURL=lightningTypeBaseGenerator.js.map
