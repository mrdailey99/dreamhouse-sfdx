"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lightningModule_1 = require("./lightningModule");
const commandUtil_1 = require("../../common/main/commandUtil");
const reflection_1 = require("../../common/main/reflection");
const Messages = require("../../common/main/Messages");
const lightningTypes_1 = require("./lightningTypes");
const lightningTypes_2 = require("./lightningTypes");
let runCommand = function (context, bundletype) {
    return __awaiter(this, void 0, void 0, function* () {
        let options = {};
        const lightning = new lightningModule_1.LightningModule();
        if (context.flags.reflect) {
            let reflection = JSON.stringify(lightningModule_1.LightningModule.reflectCreate(bundletype));
            if (!reflection) {
                throw new Error(Messages.get('InvalidBundleType'));
            }
            return reflection;
        }
        commandUtil_1.translateContextFlagsToOptions(context, options, lightningModule_1.LightningModule.getFlagMap());
        if (bundletype) {
            options['bundleType'] = bundletype;
        }
        return yield lightning.create(context.flags[lightningModule_1.LightningModule.getNameFlagName(bundletype)], context.flags[lightningModule_1.LightningModule.getPathFlagName()], options);
    });
};
let createCommand = function (bundleType) {
    let cmdName = lightningTypes_2.LightningTypesUtil.getCmdName(bundleType);
    let command = {
        command: 'lightning:' + cmdName + ':create',
        description: cmdName === 'component' ? Messages.get('LightningCmpCreateDescription') :
            Messages.get('LightningCreateDescription', cmdName),
        longDescription: cmdName === 'component' ? Messages.get('LightningCmpCreateLongDescription') :
            Messages.get('LightningCreateLongDescription', cmdName),
        help: cmdName === 'component' ? Messages.get('LightningCmpCreateHelp', cmdName, cmdName, cmdName, cmdName, cmdName, cmdName, cmdName, cmdName) : Messages.get('LightningCreateHelp', cmdName, cmdName, cmdName, cmdName),
        hidden: false,
        args: [],
        flags: reflection_1.getCommandFlags(lightningModule_1.LightningModule.reflectCreate(lightningTypes_1.LightningBundles[bundleType])),
        supportedGlobals: [],
        requiresProject: false,
        run: function (context) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield runCommand(context, lightningTypes_1.LightningBundles[bundleType]);
            });
        }
    };
    return command;
};
exports.lightningAppCreateCommand = createCommand(lightningTypes_1.LightningBundles.lightningapp);
exports.lightningCmpCreateCommand = createCommand(lightningTypes_1.LightningBundles.lightningcmp);
exports.lightningEvtCreateCommand = createCommand(lightningTypes_1.LightningBundles.lightningevt);
exports.lightningIntfCreateCommand = createCommand(lightningTypes_1.LightningBundles.lightningintf);

//# sourceMappingURL=lightningCreateCommand.js.map
