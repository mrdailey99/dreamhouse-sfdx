"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generator = require("yeoman-generator");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const manifestGeneratorInfo_1 = require("./manifestGeneratorInfo");
const path = require("path");
const Messages = require("../../common/main/Messages");
class ManifestGenerator extends generator.Base {
    constructor(args, options) {
        super(args, options);
        this.genInfo = new manifestGeneratorInfo_1.ManifestGeneratorInfo();
        generatorUtil_1.GeneratorUtil.setPaths(__dirname, this, options);
        this.argument(manifestGeneratorInfo_1.ManifestGeneratorInfo.MANIFEST_NAME_OPTION, {
            desc: Messages.get('ManifestNameOption'),
            required: false,
            type: 'String',
            defaults: manifestGeneratorInfo_1.ManifestGeneratorInfo.DEFAULT_MANIFEST_NAME
        });
        this.option(manifestGeneratorInfo_1.ManifestGeneratorInfo.SOURCE_API_VERSION_OPTION, {
            desc: Messages.get('ProjectVersionOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultSourceApiVersion()
        });
        this.option(generatorUtil_1.GeneratorUtil.TEMPLATE_OPTION, {
            desc: Messages.get('TemplateOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultTemplate()
        });
    }
    prompting() {
        let that = this;
        function x(answer) {
            that.manifestName = answer[manifestGeneratorInfo_1.ManifestGeneratorInfo.MANIFEST_NAME_OPTION];
        }
        if (!this.manifestName) {
            return this.prompt({
                type: 'input',
                name: 'manifestName',
                message: Messages.get('ManifestNamePrompt')
            }).then(answer => x(answer));
        }
    }
    writing() {
        this.fs.copyTpl(this.templatePath(this.options[generatorUtil_1.GeneratorUtil.TEMPLATE_OPTION] + this.genInfo.getSuffix()), this.destinationPath(path.join(manifestGeneratorInfo_1.ManifestGeneratorInfo.MANIFEST_CONFIG_FOLDER, 'package.xml')), {
            sourceApiVersion: this.options[manifestGeneratorInfo_1.ManifestGeneratorInfo.SOURCE_API_VERSION_OPTION]
        });
    }
}
exports.ManifestGenerator = ManifestGenerator;

//# sourceMappingURL=manifestGenerator.js.map
