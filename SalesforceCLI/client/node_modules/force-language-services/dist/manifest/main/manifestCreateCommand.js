"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const manifestModule_1 = require("./manifestModule");
const commandUtil_1 = require("../../common/main/commandUtil");
const reflection_1 = require("../../common/main/reflection");
const Messages = require("../../common/main/Messages");
exports.manifestCreateCommand = {
    command: 'manifest:create',
    description: Messages.get('ManifestCreateCommandDescription'),
    longDescription: Messages.get('ManifestCreateCommandLongDescription'),
    help: Messages.get('ManifestCreateCommandHelp'),
    hidden: true,
    args: [],
    flags: reflection_1.getCommandFlags(manifestModule_1.ManifestModule.reflectCreate()),
    supportedGlobals: [],
    requiresProject: false,
    run: function (context) {
        return __awaiter(this, void 0, void 0, function* () {
            let options = {};
            if (context.flags.reflect) {
                return JSON.stringify(manifestModule_1.ManifestModule.reflectCreate());
            }
            commandUtil_1.translateContextFlagsToOptions(context, options, manifestModule_1.ManifestModule.getFlagMap());
            const manifestModule = new manifestModule_1.ManifestModule();
            return yield manifestModule.create(context.flags[manifestModule_1.ManifestModule.getNameFlagName()], context.flags[manifestModule_1.ManifestModule.getPathFlagName()], options);
        });
    }
};

//# sourceMappingURL=manifestCreateCommand.js.map
