"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generator = require("yeoman-generator");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const scratchDefGeneratorInfo_1 = require("./scratchDefGeneratorInfo");
const path = require("path");
const Messages = require("../../common/main/Messages");
class ScratchDefGenerator extends generator.Base {
    constructor(args, options) {
        super(args, options);
        this.genInfo = new scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo();
        // uses targetPath if set
        generatorUtil_1.GeneratorUtil.setPaths(__dirname, this, options);
        this.argument(scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.SCRATCH_DEF_NAME_OPTION, {
            desc: Messages.get('ScratchDefNameOption'),
            required: false,
            type: 'String',
            defaults: scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.DEFAULT_SCRATCHDEF_NAME
        });
        this.option(generatorUtil_1.GeneratorUtil.TEMPLATE_OPTION, {
            desc: Messages.get('TemplateOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultTemplate()
        });
        this.option(scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.COMPANY_OPTION, {
            desc: Messages.get('ScratchDefCompanyOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultCompanyName()
        });
        this.option(scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.LAST_NAME_OPTION, {
            desc: Messages.get('ScratchDefLastNameOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultLastName()
        });
        this.option(scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.EMAIL_OPTION, {
            desc: Messages.get('ScratchDefEmailOption'),
            type: 'String',
            defaults: ''
        });
    }
    prompting() {
        let that = this;
        function x(answer) {
            that.scratchDefName =
                answer[scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.SCRATCH_DEF_NAME_OPTION];
        }
        if (!this.scratchDefName) {
            return this.prompt({
                type: 'input',
                name: 'scratchDefName',
                message: Messages.get('ScratchDefNamePrompt')
            }).then(answer => x(answer)); // type coercion due to the weak .d.ts for the base generator
        }
    }
    /**
     * everything goes into the Config directory
     * generate the proper scratch-def.json file
     */
    writing() {
        this.fs.copyTpl(this.templatePath(this.options[generatorUtil_1.GeneratorUtil.TEMPLATE_OPTION] + this.genInfo.getSuffix()), this.destinationPath(path.join(scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.SCRATCHDEF_CONFIG_FOLDER, this.scratchDefName)), {
            company: this.options[scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.COMPANY_OPTION],
            lastName: this.options[scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.LAST_NAME_OPTION],
            email: this.options[scratchDefGeneratorInfo_1.ScratchDefGeneratorInfo.EMAIL_OPTION]
        });
    }
}
exports.ScratchDefGenerator = ScratchDefGenerator;

//# sourceMappingURL=scratchDefGenerator.js.map
