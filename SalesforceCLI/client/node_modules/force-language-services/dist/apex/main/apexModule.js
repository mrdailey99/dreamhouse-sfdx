"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const apexClassGenerator_1 = require("./apexClassGenerator");
const createBase_1 = require("../../common/main/createBase");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const commandUtil_1 = require("../../common/main/commandUtil");
const apexGeneratorInfo_1 = require("./apexGeneratorInfo");
const Messages = require("../../common/main/Messages");
class ApexModule {
    /**
     * @param {apiName} - name of the new apex class
     * @param {targetPath} - where to generate the apex
     * @param (options) - available options (to be documented)
     *     should allow config - which is a json file with all the options in a decision tree form)
     */
    // NOTE: the yeoman generator changes the actual cwd when the destinationRoot is set
    //       and too many things in there assume that
    //       so if there is a target path, reset the cwd after done running the generator
    create(apiName, targetPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const generatorName = 'force:apex';
            let addGenerators = function (env) {
                env.registerStub(apexClassGenerator_1.ApexClassGenerator, generatorName);
            };
            let checkInputs = function () {
                let templateName = options['template'];
                let apiVersion = options['apiVersion'];
                const checkNameResult = generatorUtil_1.GeneratorUtil.checkName(apiName);
                if (checkNameResult.length > 0) {
                    return checkNameResult;
                }
                if (templateName) {
                    if (!ApexModule.genInfo.isValidTemplate(templateName)) {
                        return Messages.get('InvalidTemplate');
                    }
                }
                if (apiVersion) {
                    if (!ApexModule.genInfo.isValidApiVersion(apiVersion)) {
                        return Messages.get('InvalidApiVersion');
                    }
                }
                return '';
            };
            let createOptions = options;
            createOptions['apiName'] = apiName;
            let rawOutput = yield new createBase_1.CreateBase().create(apiName, targetPath, createOptions, generatorName, checkInputs, addGenerators);
            if (options['json']) {
                return generatorUtil_1.GeneratorUtil.jsonOutput(rawOutput);
            }
            else {
                return rawOutput;
            }
        });
    }
    static getNameFlagName() {
        return 'class' + commandUtil_1.CommandUtil.NAME_FLAG;
    }
    static getPathFlagName() {
        return commandUtil_1.CommandUtil.PATH_FLAG;
    }
    static reflectCreate() {
        let reflect = { flags: {} };
        generatorUtil_1.GeneratorUtil.addNameFlag(reflect, ApexModule.getNameFlagName(), Messages.get('ApexNameFlagDescription'), Messages.get('ApexNameFlagLongDescription'));
        generatorUtil_1.GeneratorUtil.addCommonFlags(reflect, ApexModule.genInfo);
        generatorUtil_1.GeneratorUtil.addApiVersionFlag(reflect, ApexModule.genInfo);
        return reflect;
    }
}
ApexModule.genInfo = new apexGeneratorInfo_1.ApexGeneratorInfo();
exports.ApexModule = ApexModule;
;

//# sourceMappingURL=apexModule.js.map
