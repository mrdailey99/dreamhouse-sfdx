"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createBase_1 = require("../../common/main/createBase");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const commandUtil_1 = require("../../common/main/commandUtil");
const vfGeneratorInfo_1 = require("./vfGeneratorInfo");
const Messages = require("../../common/main/Messages");
class VFModule {
    constructor(vfKind, suffix, genDir) {
        this.vfKind = vfKind;
        this.vfSuffix = suffix;
        this.vfKindCap = vfKind.charAt(0).toUpperCase + vfKind.slice(1);
        this.genInfo = new vfGeneratorInfo_1.VFGeneratorInfo(suffix, genDir);
    }
    /**
     * @param {pageName} - name of the new apex class
     * @param {targetPath} - where to generate the apex
     * @param (options) - available options (to be documented)
     *     should allow config - which is a json file with all the options in a decision tree form)
     */
    create(vfName, targetPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let that = this;
            let checkInputs = function () {
                let templateName = options['template'];
                let apiVersion = options['apiVersion'];
                const checkNameResult = generatorUtil_1.GeneratorUtil.checkName(vfName);
                if (checkNameResult.length > 0) {
                    return checkNameResult;
                }
                if (!options['vfLabel']) {
                    return Messages.get('MissingLabel');
                }
                if (templateName) {
                    if (!that.genInfo.isValidTemplate(templateName)) {
                        return Messages.get('InvalidTemplate');
                    }
                }
                if (apiVersion) {
                    if (!that.genInfo.isValidApiVersion(apiVersion)) {
                        return Messages.get('InvalidApiVersion');
                    }
                }
                return '';
            };
            let createOptions = options;
            createOptions['vfName'] = vfName;
            if (!options['template']) {
                createOptions['template'] = this.genInfo.getDefaultTemplate();
            }
            let rawOutput = yield new createBase_1.CreateBase().create(vfName, targetPath, createOptions, this.getGeneratorName(), checkInputs, this.addGenerators);
            if (options['json']) {
                return generatorUtil_1.GeneratorUtil.jsonOutput(rawOutput);
            }
            else {
                return rawOutput;
            }
        });
    }
    static getNameFlagName(vfKind) {
        return vfKind + commandUtil_1.CommandUtil.NAME_FLAG;
    }
    static getPathFlagName() {
        return commandUtil_1.CommandUtil.PATH_FLAG;
    }
    static reflectCreate(suffix, vfKind, genDir) {
        let reflect = { flags: {} };
        let genInfo = new vfGeneratorInfo_1.VFGeneratorInfo(suffix, genDir);
        generatorUtil_1.GeneratorUtil.addCommonFlags(reflect, genInfo);
        generatorUtil_1.GeneratorUtil.addNameFlag(reflect, VFModule.getNameFlagName(vfKind), Messages.get('VfNameFlagDescription', vfKind), Messages.get('VfNameFlagLongDescription', vfKind));
        generatorUtil_1.GeneratorUtil.addApiVersionFlag(reflect, genInfo);
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: 'label', char: 'l', hasValue: true, required: true,
            description: Messages.get('VfLabelFlagDescription', vfKind),
            longDescription: Messages.get('VfLabelFlagLongDescription', vfKind),
        }, [], '');
        return reflect;
    }
}
VFModule.LOW_API_VERSION = 14;
VFModule.HIGH_API_VERSION = 39;
exports.VFModule = VFModule;
;

//# sourceMappingURL=vfModule.js.map
