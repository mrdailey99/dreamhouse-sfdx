"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generator = require("yeoman-generator");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const vfGeneratorInfo_1 = require("./vfGeneratorInfo");
const Messages = require("../../common/main/Messages");
class VFGenerator extends generator.Base {
    constructor(args, options, suffix, vfKind, genDir) {
        super(args, options);
        this.vfKind = vfKind;
        this.vfSuffix = suffix;
        this.vfKindCap = vfKind.charAt(0).toUpperCase + vfKind.slice(1);
        this.genInfo = new vfGeneratorInfo_1.VFGeneratorInfo(suffix, genDir);
        generatorUtil_1.GeneratorUtil.setPaths(genDir, this, options);
        this.argument('vfName', {
            desc: Messages.get('VfNameOption') + this.vfKindCap,
            required: false,
            type: 'String',
            defaults: ''
        });
        this.option('apiVersion', {
            desc: Messages.get('ApiVersionOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultApiVersion()
        });
        this.option('vfLabel', {
            desc: Messages.get('VfLabelOption') + this.vfKindCap,
            type: 'String',
            defaults: ''
        });
        this.option('template', {
            desc: Messages.get('TemplateOption'),
            type: 'String',
            defaults: this.genInfo.getDefaultTemplate()
        });
    }
    prompting() {
        let that = this;
        function x(answer) {
            that.vfName = answer['vfName'];
        }
        if (!this.vfName) {
            return this.prompt({
                type: 'input',
                name: 'vfName',
                message: 'What is the name of your VisualForce ' + that.vfKindCap + '?'
            }).then(answer => x(answer)); // type coercion due to the weak .d.ts for the base generator
        }
    }
    writing() {
        this.fs.copyTpl(this.templatePath(this.options['template'] + this.vfSuffix), this.destinationPath(this.vfName + this.vfSuffix), {});
        let metaSuffix = '.' + this.vfKind + '-meta.xml';
        this.fs.copyTpl(this.templatePath('_' + this.vfKind + metaSuffix), this.destinationPath(this.vfName + metaSuffix), {
            vfName: this.vfName,
            apiVersion: this.options['apiVersion'],
            vfLabel: this.options['vfLabel']
        });
    }
}
exports.VFGenerator = VFGenerator;
;

//# sourceMappingURL=vfGenerator.js.map
