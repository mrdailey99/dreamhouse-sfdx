"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscodeGenerator_1 = require("./vscodeGenerator");
const createBase_1 = require("../../common/main/createBase");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const commandUtil_1 = require("../../common/main/commandUtil");
const vscodeGeneratorInfo_1 = require("./vscodeGeneratorInfo");
const Messages = require("../../common/main/Messages");
class VSCodeModule {
    static getFlagMap() {
        let flagMap = new Map();
        flagMap.set(VSCodeModule.PRETTIER_FLAG, vscodeGeneratorInfo_1.VSCodeGeneratorInfo.PRETTIER_OPTION);
        flagMap.set(VSCodeModule.ESLINT_FLAG, vscodeGeneratorInfo_1.VSCodeGeneratorInfo.ESLINT_OPTION);
        return flagMap;
    }
    create(targetPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let addGenerators = function (env) {
                env.registerStub(vscodeGenerator_1.VSCodeGenerator, vscodeGenerator_1.VSCodeGenerator.GENERATOR_NAME);
            };
            let checkInputs = function () {
                return '';
            };
            let createOptions = options;
            let rawOutput = yield new createBase_1.CreateBase().create(vscodeGeneratorInfo_1.VSCodeGeneratorInfo.EXTENSIONS_CONFIG_NAME, targetPath, createOptions, vscodeGenerator_1.VSCodeGenerator.GENERATOR_NAME, checkInputs, addGenerators);
            if (options['json']) {
                return generatorUtil_1.GeneratorUtil.jsonOutput(rawOutput);
            }
            else {
                return rawOutput;
            }
        });
    }
    static getPathFlagName() {
        return commandUtil_1.CommandUtil.PATH_FLAG;
    }
    static reflectCreate() {
        let reflect = { flags: {} };
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: VSCodeModule.PRETTIER_FLAG,
            hasValue: false,
            required: false,
            description: Messages.get('VSCodePrettierFlagDescription'),
            longDescription: Messages.get('VSCodePrettierFlagLongDescription')
        }, [], '');
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: VSCodeModule.ESLINT_FLAG,
            hasValue: false,
            required: false,
            description: Messages.get('VSCodeESLintFlagDescription'),
            longDescription: Messages.get('VSCodeESLintFlagLongDescription')
        }, [], '');
        return reflect;
    }
}
VSCodeModule.VSCODE_FLAG = 'vscode';
VSCodeModule.PRETTIER_FLAG = 'prettier';
VSCodeModule.ESLINT_FLAG = 'eslint';
exports.VSCodeModule = VSCodeModule;

//# sourceMappingURL=vscodeModule.js.map
