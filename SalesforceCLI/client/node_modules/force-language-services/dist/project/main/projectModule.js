"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const projectGenerator_1 = require("./projectGenerator");
const scratchDefGenerator_1 = require("../../scratchdef/main/scratchDefGenerator");
const artifactGenerator_1 = require("../../artifact/main/artifactGenerator");
const createBase_1 = require("../../common/main/createBase");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const commandUtil_1 = require("../../common/main/commandUtil");
const projectGeneratorInfo_1 = require("./projectGeneratorInfo");
const manifestGenerator_1 = require("../../manifest/main/manifestGenerator");
const vscodeGenerator_1 = require("../../vscode/main/vscodeGenerator");
const prettierGenerator_1 = require("../../prettier/main/prettierGenerator");
const Messages = require("../../common/main/Messages");
const eslintGenerator_1 = require("../../eslint/main/eslintGenerator");
class ProjectModule {
    static getFlagMap() {
        let flagMap = new Map();
        flagMap.set(ProjectModule.LOGIN_URL_FLAG, projectGeneratorInfo_1.ProjectGeneratorInfo.LOGIN_URL_OPTION);
        flagMap.set(ProjectModule.NAMESPACE_FLAG, projectGeneratorInfo_1.ProjectGeneratorInfo.NAMESPACE_OPTION);
        flagMap.set(ProjectModule.DEFAULT_PROJECT_FLAG, projectGeneratorInfo_1.ProjectGeneratorInfo.DEFAULT_PROJECT_OPTION);
        flagMap.set(ProjectModule.SOURCE_API_VERSION_FLAG, projectGeneratorInfo_1.ProjectGeneratorInfo.SOURCE_API_VERSION_OPTION);
        flagMap.set(ProjectModule.MANIFEST_FLAG, projectGeneratorInfo_1.ProjectGeneratorInfo.MANIFEST_OPTION);
        return flagMap;
    }
    /**
     * @param {projectName} - name of the new project
     * @param {targetPath} - where to generate the project
     * @param (options) - available options (to be documented)
     *     should allow config - which is a json file with all the options in a decision tree form)
     */
    // NOTE: the yeoman generator changes the actual cwd when the destinationRoot is set
    //       and too many things in there assume that
    //       so if there is a target path, reset the cwd after done running the generator
    create(projectName, targetPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let addGenerators = function (env) {
                env.registerStub(projectGenerator_1.ProjectGenerator, projectGenerator_1.ProjectGenerator.GENERATOR_NAME);
                env.registerStub(scratchDefGenerator_1.ScratchDefGenerator, 'force:scratchdef');
                env.registerStub(artifactGenerator_1.ArtifactGenerator, 'force:artifact');
                env.registerStub(manifestGenerator_1.ManifestGenerator, 'force:manifest');
                env.registerStub(vscodeGenerator_1.VSCodeGenerator, vscodeGenerator_1.VSCodeGenerator.GENERATOR_NAME);
                env.registerStub(prettierGenerator_1.PrettierGenerator, prettierGenerator_1.PrettierGenerator.GENERATOR_NAME);
                // There is a bug where you cannot register a third-level generator.
                // The ESLintGenerator is registered here so that it works as a
                // composed generator in ArtifactGenerator.
                env.registerStub(eslintGenerator_1.ESLintGenerator, eslintGenerator_1.ESLintGenerator.GENERATOR_NAME);
            };
            let checkInputs = function () {
                let templateName = options[generatorUtil_1.GeneratorUtil.TEMPLATE_OPTION];
                let namespace = options[projectGeneratorInfo_1.ProjectGeneratorInfo.NAMESPACE_OPTION];
                // check for valid projectName - any valid dir/folder name for now
                // only can catch this when creating the project by trying to create a folder
                // TODO - check for valid login URL???
                if (templateName) {
                    if (!ProjectModule.genInfo.isValidTemplate(templateName)) {
                        return Messages.get('InvalidTemplate');
                    }
                }
                if (namespace) {
                    const checkNameResult = generatorUtil_1.GeneratorUtil.checkName(namespace);
                    if (checkNameResult) {
                        return checkNameResult;
                    }
                    if (namespace.length > ProjectModule.MAX_NAMESPACE_LENGTH) {
                        return Messages.get('NamespaceLengthExceeded', ProjectModule.MAX_NAMESPACE_LENGTH);
                    }
                }
                return '';
            };
            let createOptions = options;
            createOptions[projectGeneratorInfo_1.ProjectGeneratorInfo.PROJECT_NAME_OPTION] = projectName;
            let rawOutput = yield new createBase_1.CreateBase().create(projectName, targetPath, createOptions, projectGenerator_1.ProjectGenerator.GENERATOR_NAME, checkInputs, addGenerators);
            if (options[generatorUtil_1.GeneratorUtil.JSON_OPTION]) {
                return generatorUtil_1.GeneratorUtil.jsonOutput(rawOutput);
            }
            else {
                return rawOutput;
            }
        });
    }
    static getNameFlagName() {
        return 'project' + commandUtil_1.CommandUtil.NAME_FLAG;
    }
    static getPathFlagName() {
        return commandUtil_1.CommandUtil.PATH_FLAG;
    }
    static reflectCreate() {
        let reflect = { flags: {} };
        generatorUtil_1.GeneratorUtil.addNameFlag(reflect, ProjectModule.getNameFlagName(), Messages.get('ProjectNameFlagDescription'), Messages.get('ProjectNameFlagLongDescription'));
        // Surpressing template in common flags so we can add it
        // below with custom descriptions.
        generatorUtil_1.GeneratorUtil.addCommonFlags(reflect, ProjectModule.genInfo, true);
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: commandUtil_1.CommandUtil.TEMPLATE_FLAG,
            char: 't',
            hasValue: true,
            required: false,
            description: Messages.get('ProjectTemplateFlag'),
            longDescription: Messages.get('ProjectTemplateFlagLongDescription')
        }, this.genInfo.getTemplates(), this.genInfo.getDefaultTemplate());
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: ProjectModule.LOGIN_URL_FLAG,
            char: 'l',
            hasValue: true,
            required: false,
            hidden: true,
            description: Messages.get('ProjectLoginFlagDescription'),
            longDescription: Messages.get('ProjectLoginFlagLongDescription')
        }, [], ProjectModule.genInfo.getDefaultLoginURL());
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: ProjectModule.SOURCE_API_VERSION_FLAG,
            hidden: true,
            description: Messages.get('ProjectVersionFlagDescription'),
            longDescription: Messages.get('ProjectVersionFlagLongDescription')
        }, [], ProjectModule.genInfo.getDefaultSourceApiVersion());
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: ProjectModule.NAMESPACE_FLAG,
            char: 's',
            hasValue: true,
            required: false,
            description: Messages.get('ProjectNamespaceFlagDescription'),
            longDescription: Messages.get('ProjectNamespaceFlagLongDescription')
        }, [], '');
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: ProjectModule.DEFAULT_PROJECT_FLAG,
            char: 'p',
            hasValue: true,
            required: false,
            description: Messages.get('ProjectPackageFlagDescription'),
            longDescription: Messages.get('ProjectPackageFlagLongDescription')
        }, [], ProjectModule.genInfo.getDefaultArtifactName());
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: ProjectModule.MANIFEST_FLAG,
            char: 'x',
            hasValue: false,
            required: false,
            description: Messages.get('ProjectManifestFlagDescription'),
            longDescription: Messages.get('ProjectManifestFlagLongDescription')
        }, [], '');
        return reflect;
    }
}
ProjectModule.genInfo = new projectGeneratorInfo_1.ProjectGeneratorInfo();
// Visible For Testing
ProjectModule.LOGIN_URL_FLAG = 'loginurl';
ProjectModule.NAMESPACE_FLAG = 'namespace';
ProjectModule.DEFAULT_PROJECT_FLAG = 'defaultpackagedir';
ProjectModule.SOURCE_API_VERSION_FLAG = 'sourceapiversion';
ProjectModule.MANIFEST_FLAG = 'manifest';
ProjectModule.MAX_PROJECT_NAME_LENGTH = 40;
ProjectModule.MAX_NAMESPACE_LENGTH = 15;
exports.ProjectModule = ProjectModule;

//# sourceMappingURL=projectModule.js.map
