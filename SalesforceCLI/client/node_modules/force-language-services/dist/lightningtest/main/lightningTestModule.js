"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lightningTestGenerator_1 = require("./lightningTestGenerator");
const createBase_1 = require("../../common/main/createBase");
const generatorUtil_1 = require("../../common/main/generatorUtil");
const commandUtil_1 = require("../../common/main/commandUtil");
const lightningTestGeneratorInfo_1 = require("./lightningTestGeneratorInfo");
const Messages = require("../../common/main/Messages");
class LightningTestModule {
    /**
     * @param {apiName} - name of the new lightningTest
     * @param {targetPath} - where to generate the lightningTest
     * @param (options) - available options (to be documented)
     *     should allow config - which is a json file with all the options in a decision tree form)
     */
    // NOTE: the yeoman generator changes the actual cwd when the destinationRoot is set
    //       and too many things in there assume that
    //       so if there is a target path, reset the cwd after done running the generator
    create(apiName, targetPath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const generatorName = 'force:lightningtest';
            let addGenerators = function (env) {
                env.registerStub(lightningTestGenerator_1.LightningTestGenerator, generatorName);
            };
            let checkInputs = function () {
                const checkNameResult = generatorUtil_1.GeneratorUtil.checkName(apiName);
                if (checkNameResult.length > 0) {
                    return checkNameResult;
                }
                return '';
            };
            let createOptions = options;
            createOptions['apiName'] = apiName;
            let rawOutput = yield new createBase_1.CreateBase().create(apiName, targetPath, createOptions, generatorName, checkInputs, addGenerators);
            if (options['json']) {
                return generatorUtil_1.GeneratorUtil.jsonOutput(rawOutput);
            }
            else {
                return rawOutput;
            }
        });
    }
    static getNameFlagName() {
        return 'test' + commandUtil_1.CommandUtil.NAME_FLAG;
    }
    static getPathFlagName() {
        return commandUtil_1.CommandUtil.PATH_FLAG;
    }
    static getFlagMap() {
        let flagMap = new Map();
        flagMap.set(LightningTestModule.LIGHTNING_INTERNAL_FLAG, LightningTestModule.LIGHTNING_INTERNAL_FLAG);
        return flagMap;
    }
    static reflectCreate() {
        let reflect = { flags: {} };
        generatorUtil_1.GeneratorUtil.addNameFlag(reflect, LightningTestModule.getNameFlagName(), Messages.get('LightningTestNameFlagDescription'), Messages.get('LightningTestNameFlagLongDescription'));
        generatorUtil_1.GeneratorUtil.addCommonFlags(reflect, LightningTestModule.genInfo);
        // flag used for internal core scenarios
        generatorUtil_1.GeneratorUtil.addFlag(reflect, {
            name: LightningTestModule.LIGHTNING_INTERNAL_FLAG,
            char: 'x',
            hasValue: false,
            required: false,
            hidden: true,
            description: Messages.get('LightningInternalFlagDescription'),
            longDescription: Messages.get('LightningInternalFlagLongDescription')
        }, [], '');
        return reflect;
    }
}
LightningTestModule.LIGHTNING_INTERNAL_FLAG = 'internal';
LightningTestModule.genInfo = new lightningTestGeneratorInfo_1.LightningTestGeneratorInfo();
exports.LightningTestModule = LightningTestModule;
;

//# sourceMappingURL=lightningTestModule.js.map
